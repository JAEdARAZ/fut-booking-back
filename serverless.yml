service: fut-booking-back
app: fut-booking

frameworkVersion: "3"

plugins:
  - serverless-iam-roles-per-function
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${self:custom.deployment.globalStages.stage}
  region: ${self:custom.deployment.region.${self:provider.stage}}
  environment:
    futBookingTableName: ${self:custom.futBookingTableName}
    httpApiGatewayEndpointId: !Ref HttpApi
    region: ${self:provider.region}

package:
  individually: true
  patterns:
    - "!**/*"

custom:
  deployment: ${file(config/deployment.yml):deployment}
  futBookingTableName: ${self:provider.stage}-fut-booking
  cognitoEmail: ${param:email, ""}
  cognitoUserPoolName: ${self:provider.stage}-fut-booking
  export-env:
    filename: .awsenv
    overwrite: true

functions:
  getGame:
    handler: src/functions/getGame/index.handler
    events:
      - httpApi:
          method: GET
          path: /games/{gameId}
    package:
      patterns:
        - src/common/**
        - package.json
        - node_modules/**
        - src/functions/getGame/**
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
          Resource:
            - !GetAtt FutBookingTable.Arn
  getGames:
    handler: src/functions/getGames/index.handler
    events:
      - httpApi:
          method: GET
          path: /games
    package:
      patterns:
        - src/common/**
        - package.json
        - node_modules/**
        - src/functions/getGames/**
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
          Resource:
            - !Sub '${FutBookingTable.Arn}/index/*'
  createGame:
    handler: src/functions/createGame/index.handler
    events:
      - httpApi:
          method: POST
          path: /games
    package:
      patterns:
        - src/common/**
        - package.json
        - node_modules/**
        - src/functions/createGame/**
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource:
            - !GetAtt FutBookingTable.Arn
        - Effect: "Allow"
          Action:
            - dynamodb:Query
          Resource:
            - !Sub '${FutBookingTable.Arn}/index/*'
  deleteGame:
    handler: src/functions/deleteGame/index.handler
    events:
      - httpApi:
          method: DELETE
          path: /games/{gameId}
    package:
      patterns:
        - src/common/**
        - package.json
        - node_modules/**
        - src/functions/deleteGame/**
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt FutBookingTable.Arn
  getPlayerGames:
    handler: src/functions/getPlayerGames/index.handler
    events:
      - httpApi:
          method: GET
          path: /players/{playerId}/games
    package:
      patterns:
        - src/common/**
        - package.json
        - node_modules/**
        - src/functions/getPlayerGames/**
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
          Resource:
            - !Sub '${FutBookingTable.Arn}/index/*'
  addPlayer:
    handler: src/functions/addPlayer/index.handler
    events:
      - httpApi:
          method: POST
          path: /games/{gameId}/players
    package:
      patterns:
        - src/common/**
        - package.json
        - node_modules/**
        - src/functions/addPlayer/**
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource:
            - !GetAtt FutBookingTable.Arn
  createPlayer:
    handler: src/functions/createPlayer/index.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.cognitoUserPoolName}
          trigger: PostConfirmation
          existing: true
    package:
      patterns:
        - src/common/**
        - package.json
        - node_modules/**
        - src/functions/createPlayer/**
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
          Resource:
            - !GetAtt FutBookingTable.Arn
  getFields:
    handler: src/functions/getFields/index.handler
    events:
      - httpApi:
          method: GET
          path: /fields
    package:
      patterns:
        - src/common/**
        - package.json
        - node_modules/**
        - src/functions/getFields/**
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
          Resource:
            - !GetAtt FutBookingTable.Arn
  createField:
    handler: src/functions/createField/index.handler
    events:
      - httpApi:
          method: POST
          path: /fields
    package:
      patterns:
        - src/common/**
        - package.json
        - node_modules/**
        - src/functions/createField/**
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
          Resource:
            - !GetAtt FutBookingTable.Arn

resources:
  Resources:
    FutBookingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.futBookingTableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: gameWeek
            AttributeType: S
          - AttributeName: gameDateTime
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: gameWeek-gameDateTime-index
            KeySchema:
              - AttributeName: gameWeek
                KeyType: HASH
              - AttributeName: gameDateTime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: SK-gameDateTime-index
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: gameDateTime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.cognitoUserPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: gender
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: birthdate
            AttributeDataType: String
            Mutable: false
            Required: true
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          SourceArn: arn:aws:ses:${self:provider.region}:${aws:accountId}:identity/${self:custom.cognitoEmail}
          From: Fut Booking <${self:custom.cognitoEmail}>
          ReplyToEmailAddress: ${self:custom.cognitoEmail}
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
          EmailSubjectByLink: "[FUT BOOKING] Verification Link"
          EmailMessageByLink: >
            Hey!<br><br>
            Please click the following link to verify your email address: {##Verify Email##}<br>
            Soon we will be playing some matches ;)<br><br>
            Best regards,<br>
            Fut Booking.
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-fut-booking-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        AccessTokenValidity: 1
        RefreshTokenValidity: 30
        IdTokenValidity: 1
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: !Ref CognitoUserPool 
        Domain: fut-booking